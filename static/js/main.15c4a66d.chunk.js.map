{"version":3,"sources":["serviceWorker.ts","models/index.tsx","components/DarkMode/index.tsx","logo_pic_wide.svg","logo_name.svg","logo_whole.svg","components/navMenu/index.tsx","components/header/index.tsx","fashionHouse/index.tsx","events/index.tsx","routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Models","DarkModeToggle","useColorMode","colorMode","toggleColorMode","colorScheme","color","aria-label","onClick","icon","Moon","Sun","isRound","NavMenu","useDisclosure","isOpen","onOpen","onClose","React","useRef","Hamburger","boxSize","placement","bg","opacity","src","logo","width","mb","style","long","height","shadow","logo_name","short","Header","useState","heightMode","setHeightMode","onscroll","document","documentElement","scrollTop","h","transition","onTransitionEndCapture","scrollTo","top","behavior","p","light","dark","pos","left","right","boxShadow","justify","align","w","logo_pic","mt","FashionHouse","as","content","about","split","map","line","index","Events","Routes","m","mx","exact","path","component","from","to","createBrowserHistory","App","basename","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15c4a66d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { Box, Heading } from '@chakra-ui/react'\n\nexport function Models() {\n  return (\n    <Box>\n      <Heading>Models</Heading>\n    </Box>\n  )\n}\n","import React from 'react'\r\nimport { IconButton, useColorMode } from '@chakra-ui/react'\r\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\r\n\r\nexport function DarkModeToggle() {\r\n  const { colorMode, toggleColorMode } = useColorMode()\r\n  return (\r\n    <IconButton\r\n      colorScheme='grey'\r\n      color='white'\r\n      aria-label='change color mode'\r\n      onClick={toggleColorMode}\r\n      icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\r\n      isRound\r\n    />\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo_pic_wide.61a9ffd1.svg\";","export default __webpack_public_path__ + \"static/media/logo_name.7f2a0000.svg\";","export default __webpack_public_path__ + \"static/media/logo_whole.38942d94.svg\";","import React from 'react'\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  IconButton,\r\n  Input,\r\n  useDisclosure,\r\n  Image,\r\n} from '@chakra-ui/react'\r\nimport logo from '../../logo_whole.svg'\r\nimport { HamburgerIcon } from '@chakra-ui/icons'\r\n\r\nexport const NavMenu = () => {\r\n  // const { colorMode } = useColorMode()\r\n  // const bgColor = { light: 'gray.700', dark: 'gray.700' }\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const btnRef = React.useRef()\r\n  return (\r\n    <>\r\n      <IconButton\r\n        aria-label='menu'\r\n        colorScheme='grey'\r\n        color='white'\r\n        isRound\r\n        icon={<HamburgerIcon boxSize={6} />}\r\n        onClick={onOpen}\r\n      />\r\n      <Drawer isOpen={isOpen} placement='left' onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent bg='#00152d' opacity='90%'>\r\n          <DrawerHeader>\r\n            <Image src={logo} color='white' width='100%' mb={6} />\r\n          </DrawerHeader>\r\n\r\n          <DrawerBody></DrawerBody>\r\n\r\n          <DrawerFooter></DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Box, Flex, useColorMode, Image, Center } from '@chakra-ui/react'\r\nimport { DarkModeToggle } from '../DarkMode'\r\nimport logo_pic from '../../logo_pic_wide.svg'\r\nimport logo_name from '../../logo_name.svg'\r\nimport { NavMenu } from '../navMenu'\r\n\r\nconst style = {\r\n  long: {\r\n    mb: '10vh',\r\n    height: '50vh',\r\n    shadow: '0px 20px 100px 100px #00152d',\r\n    logo_name: {\r\n      width: '100%'\r\n    }\r\n  },\r\n  short: {\r\n    mb: '0',\r\n    height: '12vh',\r\n    shadow: '',\r\n    logo_name: {\r\n      width: '0'\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const Header = () => {\r\n  const { colorMode } = useColorMode()\r\n  const bgColor = { light: '#00152d', dark: '#00152d' }\r\n\r\n  const [heightMode, setHeightMode] = useState<keyof typeof style>('short')\r\n\r\n  window.onscroll = () => {\r\n\r\n    if (heightMode != 'short' && document.documentElement.scrollTop > 0) {\r\n      setHeightMode('short')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box h={style[heightMode].height} mb={style[heightMode].mb} transition='.2s ease_in' onTransitionEndCapture={() => document.documentElement.scrollTo({ top: 0, behavior: 'smooth' })}>\r\n      <Box\r\n        p={4}\r\n        h={style[heightMode].height}\r\n        bg={bgColor[colorMode]}\r\n        pos='fixed'\r\n        left='0'\r\n        right='0'\r\n        top='0'\r\n        width='full'\r\n        transition='.5s ease-in-out'\r\n\r\n        boxShadow={style[heightMode].shadow}\r\n\r\n      >\r\n        <Flex justify='space-between' align='top' w='100%' h='100%'>\r\n          <NavMenu />\r\n\r\n          <Center height='100%'>\r\n            <Box>\r\n              <Image src={logo_pic} color='white' width='100%' />\r\n              {heightMode == 'long' &&\r\n                <Image src={logo_name} color='white' mt={6} />}\r\n            </Box>\r\n          </Center>\r\n\r\n          <DarkModeToggle />\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\nimport { Box, Heading, Text, Image } from '@chakra-ui/react'\nimport content from './content.json'\n\nexport function FashionHouse() {\n  return (\n    <Box>\n      <Heading as='h1' mb={4}>\n        Fashion House\n      </Heading>\n\n      {content.about.split('\\n').map((line, index) => (\n        <Text key={index} mb={3}>\n          {line}\n        </Text>\n      ))}\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Box, Heading } from '@chakra-ui/react'\n\nexport function Events() {\n  return (\n    <Box>\n      <Heading>Events</Heading>\n    </Box>\n  )\n}\n","import { Box } from '@chakra-ui/react'\nimport React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { Models } from './models'\nimport { Header } from './components/header'\nimport { FashionHouse } from './fashionHouse'\nimport { Events } from './events'\n\nconst Routes = () => {\n  return (\n    <>\n      <Header />\n      <Box m={4} mx='10%'>\n        <Switch>\n          <Route exact key='route-fashion-house' path='/' component={FashionHouse} />\n          <Route exact key='route-models' path='/models' component={Models} />\n          <Route exact key='route-events' path='/events' component={Events} />\n          <Redirect from='*' to='/' /> {/* TODO: add 404 page instead */}\n        </Switch>\n      </Box>\n    </>\n  )\n}\n\nexport default Routes\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport './App.css'\r\nimport { CSSReset, ChakraProvider } from '@chakra-ui/react'\r\nimport Routes from './routes'\r\nimport { createBrowserHistory } from 'history'\r\n\r\nconst history = createBrowserHistory()\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider>\r\n      <CSSReset />\r\n      <HashRouter basename='/'>\r\n        <Routes />\r\n      </HashRouter>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}