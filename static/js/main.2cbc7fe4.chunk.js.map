{"version":3,"sources":["serviceWorker.ts","models/index.tsx","components/DarkMode/index.tsx","components/header/NavItem.tsx","components/header/index.tsx","fashionHouse/index.tsx","events/index.tsx","routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Models","Box","Heading","DarkModeToggle","useColorMode","colorMode","toggleColorMode","IconButton","aria-label","onClick","icon","isRound","NavItem","children","Text","m","p","fontSize","Header","h","bg","light","dark","pos","left","right","top","borderBottomWidth","width","Flex","justify","align","w","maxWidth","to","FashionHouse","as","mb","Events","Routes","mx","exact","key","path","component","from","createBrowserHistory","App","ThemeProvider","ColorModeProvider","CSSReset","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECfC,SAASC,IACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gB,oBCHC,SAASC,IAAkB,IAAD,EACUC,cAA/BC,EADqB,EACrBA,UAAWC,EADU,EACVA,gBACnB,OACE,kBAACC,EAAA,EAAD,CACAC,aAAW,oBACXC,QAASH,EACTI,KAAoB,UAAdL,EAAuB,OAAS,MACtCM,SAAS,I,YCFFC,EAAU,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SACvB,OACE,kBAACC,EAAA,EAAD,CAAMC,EAAE,OAAOC,EAAG,EAAGC,SAAS,MAC3BJ,ICLMK,EAAS,WAAO,IAEnBb,EAAcD,cAAdC,UAER,OACE,kBAACJ,EAAA,EAAD,CAAKkB,EAAE,QACL,kBAAClB,EAAA,EAAD,CACEe,EAAG,EACHG,EAAE,OACFC,GANU,CAAEC,MAAO,WAAYC,KAAM,YAMzBjB,GACZkB,IAAK,QACLC,KAAK,IACLC,MAAM,IACNC,IAAI,IACJC,kBAAkB,MAClBC,MAAM,QACN,kBAACC,EAAA,EAAD,CAAMC,QAAQ,gBAAgBC,MAAM,SAASC,EAAE,OAAOb,EAAE,QACtD,kBAACU,EAAA,EAAD,CAAME,MAAM,SAASD,QAAQ,eAAeG,SAAS,SACnD,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMC,GAAG,KAAT,kBACT,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACT,kBAAC,EAAD,KAAS,kBAAC,IAAD,CAAMA,GAAG,WAAT,YAEX,kBAAC/B,EAAD,UCxBH,SAASgC,IAEd,OACE,kBAAClC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAASkC,GAAG,KAAKC,GAAI,GAArB,kBCNC,SAASC,IACd,OACE,kBAACrC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gBCEN,IAgBeqC,EAhBA,WACb,OAAQ,oCACR,kBAAC,EAAD,MACA,kBAACtC,EAAA,EAAD,CAAKc,EAAG,EAAGyB,GAAG,OACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,IAAI,sBAAsBC,KAAK,IAAIC,UAAWT,IAC3D,kBAAC,IAAD,CAAOM,OAAK,EAACC,IAAI,eAAeC,KAAK,UAAUC,UAAW5C,IAC1D,kBAAC,IAAD,CAAOyC,OAAK,EAACC,IAAI,eAAeC,KAAK,UAAUC,UAAWN,IAE1D,kBAAC,IAAD,CAAUO,KAAK,IAAIX,GAAG,MALxB,Q,QCFYY,cAEhB,SAASC,IACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,EAAD,SAOVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SR8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2cbc7fe4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Box, Heading } from '@chakra-ui/core'\r\n\r\nexport function Models() {\r\n  return (\r\n    <Box>\r\n      <Heading>Models</Heading>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IconButton, useColorMode } from '@chakra-ui/core'\r\n\r\nexport function DarkModeToggle() {\r\n    const { colorMode, toggleColorMode } = useColorMode()\r\n    return (\r\n      <IconButton\r\n      aria-label='change color mode'\r\n      onClick={toggleColorMode}\r\n      icon={colorMode === 'light'? 'moon' : 'sun'}\r\n      isRound={true}\r\n    />\r\n    )\r\n  }\r\n","import React from 'react'\r\nimport { Text } from '@chakra-ui/core'\r\n\r\n\r\ntype Props = {\r\n  children: React.ReactElement\r\n}\r\n\r\nexport const NavItem = ({children}: Props) => {\r\n  return (\r\n    <Text m='auto' p={4} fontSize='lg'>\r\n      {children}\r\n    </Text>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Box, Flex, useColorMode } from '@chakra-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { DarkModeToggle } from '../DarkMode'\r\nimport { NavItem } from './NavItem'\r\n\r\nexport const Header = () => {\r\n\r\n  const { colorMode } = useColorMode()\r\n  const bgColor = { light: 'gray.200', dark: 'gray.700' }\r\n  return (\r\n    <Box h='4rem'>\r\n      <Box\r\n        p={4}\r\n        h='4rem'\r\n        bg={bgColor[colorMode]}\r\n        pos={'fixed'}\r\n        left='0'\r\n        right='0'\r\n        top='0'\r\n        borderBottomWidth='1px'\r\n        width='full'>\r\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\r\n          <Flex align='center' justify='space-evenly' maxWidth='480px' >\r\n            <NavItem><Link to='/'>Fashion House</Link></NavItem>\r\n            <NavItem><Link to='/models'>Models</Link></NavItem>\r\n            <NavItem><Link to='/events'>Events</Link></NavItem>\r\n          </Flex>\r\n          <DarkModeToggle />\r\n        </Flex>\r\n\r\n      </Box >\r\n    </Box>\r\n\r\n\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Box, Heading } from '@chakra-ui/core'\r\n\r\n\r\nexport function FashionHouse() {\r\n\r\n  return (\r\n    <Box>\r\n\r\n      <Heading as='h1' mb={4} >Fashoin House</Heading>\r\n\r\n    </Box>\r\n\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Box, Heading } from '@chakra-ui/core'\r\n\r\nexport function Events() {\r\n  return (\r\n    <Box>\r\n      <Heading >Events</Heading>\r\n    </Box>\r\n  )\r\n}\r\n","import { Box } from '@chakra-ui/core'\r\nimport React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { Models } from './models'\r\nimport { Header } from './components/header'\r\nimport { FashionHouse } from './fashionHouse'\r\nimport { Events } from './events'\r\n\r\nconst Routes = () => {\r\n  return (<>\r\n  <Header />\r\n  <Box m={4} mx='10%' >\r\n    <Switch>\r\n      <Route exact key='route-fashion-house' path='/' component={FashionHouse} />\r\n      <Route exact key='route-models' path='/models' component={Models} />\r\n      <Route exact key='route-events' path='/events' component={Events} />\r\n\r\n      <Redirect from='*' to='/' /> {/* TODO: add 404 page instead */}\r\n    </Switch>\r\n  </Box>\r\n\r\n</>)\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport './App.css'\r\nimport { ThemeProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/core\"\r\nimport Routes from './routes'\r\nimport { createBrowserHistory } from \"history\"\r\n\r\nconst history = createBrowserHistory()\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider >\r\n      <ColorModeProvider>\r\n        <CSSReset />\r\n        <HashRouter basename='/'>\r\n          <Routes />\r\n        </HashRouter>\r\n      </ColorModeProvider>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}