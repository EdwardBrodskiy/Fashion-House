{"version":3,"sources":["serviceWorker.ts","models/index.tsx","components/DarkMode/index.tsx","logo_pic_wide.svg","logo_whole.svg","crown.svg","components/navMenu/components/navItem/index.tsx","components/navMenu/index.tsx","components/header/index.tsx","tools/data_parsers.tsx","fashionHouse/components/section/index.tsx","fashionHouse/index.tsx","events/components/DateEntry/index.tsx","events/components/DatedAccordion/index.tsx","events/index.tsx","routes.tsx","theme/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Models","DarkModeToggle","useColorMode","colorMode","toggleColorMode","colorScheme","color","aria-label","onClick","icon","Moon","Sun","isRound","_focus","boxShadow","NavItem","children","to","history","useHistory","push","align","src","crown","height","mr","fontSize","NavMenu","useDisclosure","isOpen","onOpen","onClose","Hamburger","boxSize","placement","bg","opacity","logo","width","mb","spacing","Header","h","p","light","dark","pos","left","right","top","zIndex","justify","w","logo_pic","parse_image_and_text_list","text","pathToImg","textProps","imageProps","map","section","index","process","alt","base","lg","objectFit","display","m","Section","px","my","FashionHouse","tabStyles","_selected","textAlign","isFitted","as","content","about","services","DateEntry","event","ref","useRef","isExpanded","setTimeout","current","getBoundingClientRect","undefined","scrollTo","pageYOffset","behavior","_expanded","flex","isTruncated","title","size","date","key","DatedAccordion","allowToggle","events","Events","Routes","mx","exact","path","component","from","theme","extendTheme","colors","brand","createBrowserHistory","App","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d43833e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\r\nimport { Box, Heading } from '@chakra-ui/react'\r\n\r\nexport function Models() {\r\n  return (\r\n    <Box>\r\n      <Heading>Models</Heading>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\nimport { IconButton, useColorMode } from '@chakra-ui/react'\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons'\n\nexport function DarkModeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <IconButton\n      colorScheme='grey'\n      color='white'\n      aria-label='change color mode'\n      onClick={toggleColorMode}\n      icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\n      isRound\n      _focus={{\n        boxShadow: '0 0 10px 1px white'\n      }}\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo_pic_wide.61a9ffd1.svg\";","export default __webpack_public_path__ + \"static/media/logo_whole.38942d94.svg\";","export default __webpack_public_path__ + \"static/media/crown.ecc8ee05.svg\";","import React, { PropsWithChildren } from 'react'\r\nimport { Flex, ListItem, Text, Image } from '@chakra-ui/react'\r\nimport crown from '../../../../crown.svg'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\ntype Props = {\r\n  to: string\r\n  onClick: () => void\r\n}\r\n\r\nexport const NavItem = ({ children, to, onClick }: Props & PropsWithChildren<{}>) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <ListItem onClick={() => {\r\n      history.push(to)\r\n      onClick()\r\n    }}>\r\n      <Flex align='center'>\r\n        <Image src={crown} height={5} mr={4} /> <Text fontSize='1.2rem' >{children}</Text>\r\n      </Flex>\r\n    </ListItem>\r\n  )\r\n}\r\n","import React from 'react'\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  IconButton,\n  useDisclosure,\n  Image,\n  List\n} from '@chakra-ui/react'\nimport logo from '../../logo_whole.svg'\n\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport { NavItem } from './components/navItem'\n\nexport const NavMenu = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <IconButton\n        aria-label='menu'\n        colorScheme='grey'\n        color='white'\n        isRound\n        icon={<HamburgerIcon boxSize={6} />}\n        onClick={onOpen}\n        _focus={{\n          boxShadow: '0 0 10px 1px white'\n        }}\n      />\n      <Drawer isOpen={isOpen} placement='left' onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent bg='brand.dark' opacity='90%' color='white'>\n          <DrawerHeader>\n            <Image src={logo} width='100%' mb={6} />\n          </DrawerHeader>\n\n          <DrawerBody>\n            <List spacing={4}>\n              <NavItem to='/' onClick={onClose}>Fashion House</NavItem>\n              <NavItem to='/models' onClick={onClose}>Models</NavItem>\n              <NavItem to='/events' onClick={onClose}>Events</NavItem>\n            </List>\n          </DrawerBody>\n\n          <DrawerFooter></DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n","import React from 'react'\nimport { Box, Flex, useColorMode, Image, Center } from '@chakra-ui/react'\nimport { DarkModeToggle } from '../DarkMode'\nimport logo_pic from '../../logo_pic_wide.svg'\nimport { NavMenu } from '../navMenu'\n\nexport const Header = () => {\n  const { colorMode } = useColorMode()\n  const bgColor = { light: 'brand.dark', dark: 'brand.dark' }\n  const height = 20\n  return (\n    <Box h={height} >\n      <Box\n        p={4}\n        h={height}\n        bg={bgColor[colorMode]}\n        pos='fixed'\n        left='0'\n        right='0'\n        top='0'\n        width='full'\n        zIndex='1000'\n      >\n        <Flex justify='space-between' align='center' w='100%' h='100%'>\n          <NavMenu />\n          <Center height='100%'>\n            <Image src={logo_pic} color='white' height='100%' />\n          </Center>\n          <DarkModeToggle />\n        </Flex>\n      </Box>\n    </Box>\n  )\n}\n","import React from 'react'\r\nimport { Text, Image, TextProps, ImageProps } from '@chakra-ui/react'\r\n\r\n\r\nexport const parse_image_and_text_list = (text: string[], pathToImg: string, textProps?: TextProps, imageProps?: ImageProps) => {\r\n  const result = text.map((section, index) => {\r\n    if (section.match(/\\.png$/)) {\r\n      return <Image key={index} src={process.env.PUBLIC_URL + pathToImg + '/' + section} alt='picture' width={{ base: '100%', lg: '30%' }} objectFit='cover' display={{ lg: 'inline' }} m={{ lg: 4 }} {...imageProps} />\r\n    } else {\r\n      return (<Text key={index} {...textProps}>\r\n        { section}\r\n      </Text >)\r\n    }\r\n  })\r\n  return result\r\n}\r\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport { parse_image_and_text_list } from '../../../tools'\n\ntype Props = {\n  text: string[]\n}\n\n// this does not do much but may do more later\nexport const Section = ({ text }: Props) => {\n  return (\n    <Box>\n      {parse_image_and_text_list(text, '/imgs/fashionHouse', { px: '10%', mb: 4 }, { my: 16 })}\n    </Box>\n  )\n}\n\n\n","import React from 'react'\nimport { Box, Heading, Tab, TabList, TabPanel, TabPanels, Tabs, useColorMode } from '@chakra-ui/react'\nimport content from './content.json'\nimport { Section } from './components/section'\n\nexport const FashionHouse = () => {\n  const { colorMode } = useColorMode()\n  const tabStyles = {\n    _selected: {\n      boxShadow: `0 0 5px 1px ${colorMode === 'light' ? '#00152d' : 'white'}`\n    }\n  }\n  return (\n    <Box textAlign='center'>\n\n      <Tabs isFitted>\n        <TabList>\n          <Tab {...tabStyles}>About</Tab>\n          <Tab {...tabStyles}>Services</Tab>\n        </TabList>\n        <Heading as='h1' m={4}>\n          Fashion House\n      </Heading>\n        <TabPanels>\n          <TabPanel p={0}>\n            <Section text={content.about} />\n          </TabPanel>\n          <TabPanel p={0}>\n            <Section text={content.services} />\n          </TabPanel>\n\n        </TabPanels>\n      </Tabs>\n    </Box>\n  )\n}\n\n\n\n","import React, { useRef } from 'react'\nimport { Text, AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Box, Heading } from '@chakra-ui/react'\nimport { eventRecord } from '../DatedAccordion'\nimport { parse_image_and_text_list } from '../../../tools'\n\ntype Props = {\n  event: eventRecord\n}\n\nexport const DateEntry = ({ event }: Props) => {\n  const ref = useRef<HTMLDivElement>(null)\n  return (\n    <AccordionItem ref={ref}>\n      {({ isExpanded }) => {\n        if (isExpanded) {\n          setTimeout(() => {\n            const pos = ref.current?.getBoundingClientRect().top\n            const offset = -80\n            if (pos !== undefined) {\n              window.scrollTo({ top: pos + window.pageYOffset + offset, behavior: 'smooth' })\n            }\n          }, 500)\n        }\n        return (\n          <>\n            <h2>\n              <AccordionButton _expanded={{\n                bg: 'brand.dark', color: 'brand.light',\n                boxShadow: '0 0 5px 1px white'\n              }}>\n                <Box flex=\"1\" textAlign=\"left\" fontSize='2xl' isTruncated>\n\n                  {event.title}\n                </Box>\n                <AccordionIcon />\n              </AccordionButton>\n            </h2>\n            <AccordionPanel p='0'>\n              <Heading my={4}>{event.title}</Heading>\n              <Text mb={10} size='sm'>{event.date}</Text>\n              {parse_image_and_text_list(event.content, `/imgs/events/${event.key}`, { px: '10%', mb: 4 }, { my: 16 })}\n            </AccordionPanel>\n          </>\n        )\n      }}\n    </AccordionItem>\n  )\n}\n","import React from 'react'\nimport { Accordion } from '@chakra-ui/react'\nimport { DateEntry } from '../DateEntry'\nimport { events } from '../../content.json'\n\nexport type eventRecord = {\n  title: string\n  date: string\n  key: number\n  content: string[]\n}\n\nexport const DatedAccordion = () => {\n  return (\n    <Accordion allowToggle>\n      {events.map((event, index) => <DateEntry event={event} key={index} />)}\n    </Accordion>\n  )\n}\n","import React from 'react'\nimport { Box, Heading } from '@chakra-ui/react'\nimport { DatedAccordion } from './components/DatedAccordion'\n\nexport const Events = () => {\n  return (\n    <Box textAlign='center'>\n      <Heading m={4}>Events</Heading>\n      <DatedAccordion />\n    </Box>\n  )\n}\n","import { Box } from '@chakra-ui/react'\nimport React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { Models } from './models'\nimport { Header } from './components/header'\nimport { FashionHouse } from './fashionHouse'\nimport { Events } from './events'\n\nconst Routes = () => {\n  return (\n    <>\n      <Header />\n      <Box mx={{ lg: '15%' }}>\n        <Switch>\n          <Route exact key='route-fashion-house' path='/' component={FashionHouse} />\n          <Route exact key='route-models' path='/models' component={Models} />\n          <Route exact key='route-events' path='/events' component={Events} />\n          <Redirect from='*' to='/' /> {/* TODO: add 404 page instead */}\n        </Switch>\n      </Box>\n    </>\n  )\n}\n\nexport default Routes\n","import { extendTheme } from \"@chakra-ui/react\"\r\n\r\n\r\nexport const theme = extendTheme({\r\n  colors: {\r\n    brand: {\r\n      dark: \"#00152d\",\r\n      light: \"white\",\r\n    },\r\n  },\r\n})","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport './App.css'\r\nimport { CSSReset, ChakraProvider } from '@chakra-ui/react'\r\nimport Routes from './routes'\r\nimport { createBrowserHistory } from 'history'\r\nimport { theme } from './theme'\r\n\r\nconst history = createBrowserHistory()\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <CSSReset />\r\n      <HashRouter basename='/'>\r\n        <Routes />\r\n      </HashRouter>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}